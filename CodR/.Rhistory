optimW <- function(N, mean, cov, v, ...){
library(nloptr)
ut <-function(w){
ut <- - (( 1/(1-v) ) +
(t(w)%*%mean) - (v * ( (t(w)%*%cov%*%w) +
(t(w)%*%mean)^2 )/2))
return(ut)
}
constraint <- function(w,...){
sum(w) - 1
}
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
#if(sum(wOptim == 1)) return(wOptim)
#else return(paste("A soma dos pesos não é igual a 1"))
}
optimW(N = N, mean = mean, cov = cov, v = v)
optimW(N = N, mean = mean, cov = cov, v = v)
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
ut <-function(w){
ut <- - (( 1/(1-v) ) +
(t(w)%*%mean) - (v * ( (t(w)%*%cov%*%w) +
(t(w)%*%mean)^2 )/2))
return(ut)
}
constraint <- function(w,...){
sum(w) - 1
}
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = ut, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
#if(sum(wOptim == 1)) return(wOptim)
#else return(paste("A soma dos pesos não é igual a 1"))
}
optimW(N = N, mean = mean, cov = cov, v = v)
CRRA <-function(w, ....){
ut <- - (( 1/(1-v) ) +
(t(w)%*%mean) - (v * ( (t(w)%*%cov%*%w) +
(t(w)%*%mean)^2 )/2))
return(ut)
}
constraint <- function(w,...){
sum(w) - 1
}
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
if(sum(wOptim == 1)) return(wOptim)
else return(paste("A soma dos pesos não é igual a 1"))
}
optimW(N = N, mean = mean, cov = cov, v = v)
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
#if(sum(wOptim == 1)) return(wOptim)
#else return(paste("A soma dos pesos não é igual a 1"))
}
optimW(N = N, mean = mean, cov = cov, v = v)
sum(optimW(N = N, mean = mean, cov = cov, v = v))
-0.8170542 + 1.5675242 +-0.1684035 + 0.8014982+  0.4336933 +-0.8172579
sum(optimW(N = N, mean = mean, cov = cov, v = v)) == 1
sum(optimW(N = N, mean = mean, cov = cov, v = v))
sum(optimW(N = N, mean = mean, cov = cov, v = v)) == 1
round(sum(optimW(N = N, mean = mean, cov = cov, v = v))) == 1
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
}
returnP(wOptim = optimW(N = N, mean = mean, cov = cov, v = v),
data = data, j = 120)
120-240
returnPortSample <- vector()
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortSample <- vector()
returnP <- function(wOptim, data, j, ....){
rp <- sum(wOptim*data[j+1,])
return(rp)
}
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
}
CRRA <-function(w, ....){
ut <- - (( 1/(1-v) ) +
(t(w)%*%mean) - (v * ( (t(w)%*%cov%*%w) +
(t(w)%*%mean)^2 )/2))
return(ut)
}
constraint <- function(w,...){
sum(w) - 1
}
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- as.matrix(fit@Estimates$Moments$mean[nWin,])
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
estSample <- function(data,i,j,...){
meanSample <- apply(data[i:j,], 2, mean)
matrixCovSample <- cov(data[i:j,])
return(list(mean = meanSample, matrixCov = matrixCovSample))
}
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortSample <- vector()
for (i in 1:(nrow(data) - window)) {
for (j in window:nrow(data)) {
mean <- estSample(data = data, i = i, j = j)[[1]]
cov <- estSample(data = data, i = i, j = j)[[2]]
returnPortSample <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
}
returnPortSample
sum(is.na(data))
is.na(data)
(nrow(data) - window)
window:nrow(data)
(nrow(data) - window)
1:(nrow(data) - window)
for (i in 1: window) {
i = i
j = i + window
mean <- estSample(data = data, i = i, j = j)[[1]]
cov <- estSample(data = data, i = i, j = j)[[2]]
returnPortSample <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
load("~/Área de Trabalho/TCC /CODIGOS/retornoPortfolio.R")
returnP <- function(wOptim, data, j, ....){
rp <- sum(wOptim*data[j+1,])
return(rp)
}
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
}
CRRA <-function(w, ....){
ut <- - (( 1/(1-v) ) +
(t(w)%*%mean) - (v * ( (t(w)%*%cov%*%w) +
(t(w)%*%mean)^2 )/2))
return(ut)
}
constraint <- function(w,...){
sum(w) - 1
}
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- as.matrix(fit@Estimates$Moments$mean[nWin,])
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
meanSample <- apply(data[i:j,], 2, mean)
estSample <- function(data,i,j,...){
meanSample <- apply(data[i:j,], 2, mean)
matrixCovSample <- cov(data[i:j,])
return(list(mean = meanSample, matrixCov = matrixCovSample))
}
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortSample <- vector()
for (i in 1:(nrow(data) - window)) {
for (j in window:nrow(data)) {
mean <- estSample(data = data, i = i, j = j)[[1]]
cov <- estSample(data = data, i = i, j = j)[[2]]
returnPortSample <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
}
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortSample <- vector()
for (i in 1: window) {
i = i
j = i + window
mean <- estSample(data = data, i = i, j = j)[[1]]
cov <- estSample(data = data, i = i, j = j)[[2]]
returnPortSample <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
rm(j)
rm(i)
rm(mean)
rm(cov)
rm(returnPortSample)
returnPortSample <- vector()
for (i in 1: window) {
i = i
j = i + window
mean <- estSample(data = data, i = i, j = j)[[1]]
cov <- estSample(data = data, i = i, j = j)[[2]]
returnPortSample <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
returnPortGASnormal <- vector()
specf <- MultiGASSpec()
for (i in 1: window) {
i = i
j = i + window
mean <- estGAS(data = data, i = i, j = j)[[1]]
cov <- estGAS(data = data, i = i, j = j)[[2]]
returnPortGASnormal <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
for (i in 1: window) {
i = i
j = i + window
mean <- estGAS(specf = specf, data = data, i = i, j = j)[[1]]
cov <- estGAS(specf = specf, data = data, i = i, j = j)[[2]]
returnPortGASnormal <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- fit@Estimates$Moments$mean[nWin,]
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
for (i in 1: window) {
i = i
j = i + window
mean <- estGAS(specf = specf, data = data, i = i, j = j)[[1]]
cov <- estGAS(specf = specf, data = data, i = i, j = j)[[2]]
returnPortGASnormal <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
mean <- estGAS(specf = specf, data = data, i = 1, j = 120)[[1]]
View(mean)
it@Estimates$Moments$mean[nWin,]
fit@Estimates$Moments$mean[nWin,]
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
fit@Estimates$Moments$mean[nWin,]
nWin = 120
fit@Estimates$Moments$mean[nWin,]
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- fit@Estimates$Moments$mean[nWin,]
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
rm(fit)
rm(mean)
estGAS(specf = specf, data = data, i = 1,
j = 120, nWin = window)
i = 1
j = 120
MultiGASFit(GASSpec = specf, data = data[i:j,])
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
fit@Estimates$Moments$mean
fit@Estimates$Moments$cov
93+28
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- fit@Estimates$Moments$mean[nWin+1,]
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin+1]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
rm(cov)
rm(i)
rm(j)
rm(fit)
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- fit@Estimates$Moments$mean[nWin+1,]
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin+1]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
specf <- MultiGASSpec()
returnPortGASnormal <- vector()
specf <- MultiGASSpec()
for (i in 1: window) {
i = i
j = i + window
est <- estGAS(specf = specf, data = data, i = 1,
j = 120, nWin = window)
mean <- est[[1]]
cov <- est[[2]]
returnPortGASnormal <- c(returnPortSample,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
alarm()
returnPortGASnormal == returnPortSample
rm(i)
rm(j)
rm(mean)
rm(cov)
rm(returnPortGASnormal)
system("xdg-open 'https://www.youtube.com/watch?v=TOamHghGCfg'")
library(GAS)
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortGASnormal <- vector()
specf <- MultiGASSpec()
for (i in 1: window) {
i = i
j = i + window
est <- estGAS(specf = specf, data = data, i = 1,
j = 120, nWin = window)
mean <- est[[1]]
cov <- est[[2]]
returnPortGASnormal <- c(returnPortGASnormal,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
system("xdg-open 'https://www.youtube.com/watch?v=TOamHghGCfg'")
mean(returnPortGASnormal)
sum(returnPortGASnormal)/120
sum(is.na(returnPortGASnormal))
load("~/TCC/CodR/TCC.RData")
returnP <- function(wOptim, data, j, ....){
rp <- sum(wOptim*data[j+1,])
return(rp)
}
install.packages("nloptr")
View(CRRA)
function(w, M1, M2, v,...){
muP <- t(w)%*%M1
sig2P <- t(w)%*%M2%*%w
m1P <- muP
m2P <- sig2P + muP^2
ut <- - (( 1/(1-v) ) + m1P - (v * m2P/2))
return(ut)
}
View(CRRA)
rm(CRRA)
CRRA <-function(w, ....){
ut <- - (( 1/(1-v) ) +
(t(w)%*%mean) - (v * ( (t(w)%*%cov%*%w) +
(t(w)%*%mean)^2 )/2))
return(ut)
}
constraint <- function(w,...){
sum(w) - 1
}
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
}
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- fit@Estimates$Moments$mean[nWin,]
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
library(GAS)
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortGASnormal <- vector()
specf <- MultiGASSpec()
rm(w)
rm(wOtim)
estGAS <- function(specf, data, i, j, nWin, ...){
fit <- MultiGASFit(GASSpec = specf, data = data[i:j,])
meanGAS <- fit@Estimates$Moments$mean[nWin,]
matrixCovGAS <- fit@Estimates$Moments$cov[,,nWin]
return(list(mean = meanGAS, matrixCov = matrixCovGAS))
}
CRRA <-function(w, ....){
ut <- - (( 1/(1-v) ) +
(t(w)%*%mean) - (v * ( (t(w)%*%cov%*%w) +
(t(w)%*%mean)^2 )/2))
return(ut)
}
constraint <- function(w,...){
sum(w) - 1
}
optimW <- function(N, mean, cov, v, ...){
library(nloptr)
w0 <- rep(0, N)
wOptim <- auglag(x0 = w0,
fn = CRRA, heq = constraint,
localsolver = "LBFGS")$par
return(wOptim)
}
returnP <- function(wOptim, data, j, ....){
rp <- sum(wOptim*data[j+1,])
return(rp)
}
estSample <- function(data,i,j,...){
meanSample <- apply(data[i:j,], 2, mean)
matrixCovSample <- cov(data[i:j,])
return(list(mean = meanSample, matrixCov = matrixCovSample))
}
library(GAS)
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortGASnormal <- vector()
specf <- MultiGASSpec()
for (i in 1: window) {
i = i
j = i + window
est <- estGAS(specf = specf, data = data, i = i,
j = j, nWin = window)
mean <- est[[1]]
cov <- est[[2]]
returnPortGASnormal <- c(returnPortGASnormal,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
system("xdg-open 'https://www.youtube.com/watch?v=TOamHghGCfg'")
warnings()
returnPortGASnormal
mean(returnPortGASnormal[-120])
library(GAS)
data <- read.csv('6_Portfolios_2x3.CSV', header = T)
data <- data[,-1]
window <- 120
N <- ncol(data)
v <- 5
returnPortGASt <- vector()
specf <- MultiGASSpec(Dist = "mvt")
for (i in 1: window) {
i = i
j = i + window
est <- estGAS(specf = specf, data = data, i = i,
j = j, nWin = window)
mean <- est[[1]]
cov <- est[[2]]
returnPortGASt <- c(returnPortGASt,
returnP(wOptim = optimW(N = N,
mean = mean,
cov = cov, v = v),
data = data, j = j))
}
system("xdg-open 'https://www.youtube.com/watch?v=TOamHghGCfg'")
returnPortGASt
mean(returnPortGASt[-120])
mean(returnPortGASnormal[-120])
source('~/TCC/CodR/GASt.R')
source('~/TCC/CodR/GASnormal.R')
